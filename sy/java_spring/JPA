## JPA와 같은 ORM을 사용하는 이유가 무엇인가요?

JPA(Java Persistence API)와 같은 ORM(Object-Relational Mapping) 프레임워크를 사용하는 주요 이유는 객체 지향 프로그래밍과 관계형 데이터베이스 사이의 불일치를 해소하고, 개발 생산성을 높이며, 유지보수성을 향상시키기 위함입니다. 

ORM을 사용하면 데이터베이스 테이블과 객체 간의 매핑을 자동으로 처리해주므로, SQL 쿼리를 직접 작성할 필요가 줄어들고, 데이터베이스 변경에 대한 영향을 최소화할 수 있습니다. 

또한, JPA는 데이터베이스 접근 로직을 캡슐화하여 비즈니스 로직과 데이터 접근 로직을 분리할 수 있게 해줍니다.

### 영속성은 어떤 기능을 하나요? 이게 진짜 성능 향상에 큰 도움이 되나요?

영속성 컨텍스트(Persistence Context)는 JPA에서 엔티티의 생명주기를 관리하는 공간입니다. 영속성 컨텍스트는 1차 캐시 역할을 하여, 같은 트랜잭션 내에서 동일한 엔티티를 여러 번 조회할 때 데이터베이스에 재접근하지 않고 캐시에 저장된 엔티티를 반환합니다. 

이를 통해 데이터베이스 접근 횟수를 줄여 성능을 향상시킬 수 있습니다. 예를 들어, 동일한 트랜잭션 내에서 동일한 ID로 여러 번 조회를 하면, 첫 번째 조회 이후에는 데이터베이스를 다시 조회하지 않고 영속성 컨텍스트에서 데이터를 가져오게 됩니다.

### N + 1 문제에 대해 설명해 주세요.

N + 1 문제는 하나의 쿼리로 N개의 엔티티를 조회한 후, 각 엔티티에 대해 추가적으로 1개의 쿼리를 실행하는 상황을 말합니다. 예를 들어, 사용자의 목록을 조회한 후 각 사용자에 대한 프로필 정보를 조회할 때 발생할 수 있습니다. 

첫 번째 쿼리로 사용자 목록(N)을 가져온 후, 각 사용자에 대해 프로필 정보를 가져오기 위해 N개의 추가 쿼리를 실행하게 되면, 총 N + 1개의 쿼리가 실행됩니다. 이는 데이터베이스 부하를 증가시키고 응답 시간을 지연시킵니다. 

이를 해결하기 위해 JPA에서는 fetch join이나 @EntityGraph를 사용하여 필요한 연관 데이터를 한 번의 쿼리로 모두 가져올 수 있도록 최적화할 수 있습니다.
